expressionTemplate =  ws [definitionStatus ws] subExpression ws
subExpression = focusConcept [ws ":" ws refinement]
definitionStatus = equivalentTo / subtypeOf
equivalentTo = "==="
subtypeOf = "<<<"
focusConcept = conceptReference *(ws "+" ws conceptReference) 
conceptReference = templateReplaceSlot  / ( conceptId [ws "|" ws term ws "|"] )
conceptId = sctId
term = nonwsNonPipe *( *SP nonwsNonPipe )
refinement =  (attributeSet / attributeGroup) *( ws ["," ws] attributeGroup )
attributeGroup = [templateRemoveSlot ws] "{" ws attributeSet ws "}"
attributeSet = attribute *(ws "," ws attribute)
attribute = [ templateRemoveSlot ws] attributeName ws "=" ws attributeValue
attributeName = conceptReference
attributeValue =  expressionValue / QM stringValue QM / "#" numericValue 
expressionValue = conceptReference / "(" ws subExpression ws ")"
stringValue = 1*(anyNonEscapedChar / escapedChar)
numericValue = decimalValue / integerValue
integerValue = (["-"/"+"] digitNonZero *digit ) / zero 
decimalValue = integerValue  "." 1*digit
sctId = digitNonZero 5*17( digit )
ws = *( SP / HTAB / CR / LF ) ; optional white space
SP = %x20 ; space
HTAB = %x09 ; tab
CR = %x0D ; carriage return
LF = %x0A ; line feed
QM = %x22  ; quotation mark
BS = %x5C  ; back slash
digit = %x30-39
zero = %x30
digitNonZero = %x31-39 
nonwsNonPipe = %x21-7B / %x7D-7E / UTF8-2 / UTF8-3 / UTF8-4
anyNonEscapedChar = HTAB / CR / LF / %x20-21 / %x23-5B / %x5D-7E / UTF8-2 / UTF8-3 / UTF8-4
escapedChar = BS QM /  BS BS
UTF8-2 = %xC2-DF UTF8-tail
UTF8-3 = %xE0 %xA0-BF UTF8-tail / %xE1-EC 2( UTF8-tail ) / %xED %x80-9F UTF8-tail / 		%xEE-EF 2( UTF8-tail )
UTF8-4 = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) / %xF4 %x80-8F 2( UTF8-tail )
UTF8-tail = %x80-BF
templateReplaceSlot = "[[" ws "+" ws [replaceInfo ws] [templateSlotInfo] "]]"
templateRemoveSlot = "[[" ws "~" ws [templateSlotInfo] "]]"
replaceInfo = replaceFlag [ws "(" expressionConstraintTemplate ")"]
replaceFlag = "id" / "scg" / "ecl"
templateSlotInfo = [cardinality ws] [templateSlotName ws] [templateSlotReference ws]
templateSlotName = "@" templateString
templateSlotReference = "$" templateString
templateString = *nonQuoteString / (QM *nondoubleQuoteString QM) / 				(SQM *nonsingleQuoteString SQM)
nonQuoteString = %x21 / %x23 / %x25-26 / %x28-3F / %x41-5A / %x5C / %x5E-7E ; no ws, quotes, at or dollar
nondoubleQuoteString = %x21 / %x23 / %x25-3F / %x41-7E ; no ws, double quotes, at or dollar
nonsingleQuoteString = %x21-23 / %x25-26 / %x28-3F / %x41-7E ; no ws, single quotes, at or dollar
SQM = %x27
expressionConstraintTemplate = ws ( refinedExpressionConstraint / compoundExpressionConstraint / 	simpleExpressionConstraint / "(" ws expressionConstraintTemplate ws ")" ) ws
simpleExpressionConstraint =  [constraintOperator ws] eclFocusConcept
refinedExpressionConstraint = simpleExpressionConstraint  ws ":" ws eclRefinement
compoundExpressionConstraint = conjunctionExpressionConstraint /		disjunctionExpressionConstraint / exclusionExpressionConstraint
conjunctionExpressionConstraint = subExpressionConstraint 					1*(ws conjunction ws subExpressionConstraint)
disjunctionExpressionConstraint = subExpressionConstraint 					1*(ws disjunction ws subExpressionConstraint)
exclusionExpressionConstraint = subExpressionConstraint ws exclusion ws 	subExpressionConstraint
subExpressionConstraint = simpleExpressionConstraint / "(" ws expressionConstraintTemplate ws ")"
eclFocusConcept = [ memberOf ws ] (conceptReference / wildCard) 
memberOf = "^"
wildCard = "*"
constraintOperator = childOf / descendantOrSelfOf / descendantOf /  parentOf /	ancestorOrSelfOf / ancestorOf 
descendantOf = "<"
descendantOrSelfOf = "<<" 
childOf = "<!" 
ancestorOf = ">" 
ancestorOrSelfOf = ">>" 
parentOf = ">!" 
conjunction = (("a"/"A") ("n"/"N") ("d"/"D") mws) / ","
disjunction = ("o"/"O") ("r"/"R") mws
exclusion = ("m"/"M") ("i"/"I") ("n"/"N") ("u"/"U") ("s"/"S") mws	
eclRefinement = subRefinement ws [conjunctionRefinementSet / disjunctionRefinementSet]
conjunctionRefinementSet = 1*(ws conjunction ws subRefinement)
disjunctionRefinementSet = 1*(ws disjunction ws subRefinement)
subRefinement = eclAttributeSet / eclAttributeGroup / "(" ws eclRefinement ws ")"
eclAttributeSet = subAttributeSet ws [conjunctionAttributeSet / disjunctionAttributeSet]
conjunctionAttributeSet = 1*(ws conjunction ws subAttributeSet)
disjunctionAttributeSet = 1*(ws disjunction ws subAttributeSet)
subAttributeSet = eclAttribute / "(" ws eclAttributeSet ws ")"
eclAttributeGroup = ["[" cardinality ws "]"] "{" ws eclAttributeSet ws "}"
eclAttribute = ["[" cardinality "]" ws] [reverseFlag ws] [attributeOperator ws] eclAttributeName ws	(expressionComparisonOperator ws expressionConstraintValue / 	numericComparisonOperator ws "#" numericValue / 			stringComparisonOperator ws QM stringValue QM)
cardinality = minValue to maxValue 
minValue = nonNegativeIntegerValue
to = ".."
maxValue = nonNegativeIntegerValue / many
many = "*"
reverseFlag =  "R"
attributeOperator = descendantOrSelfOf / descendantOf 
eclAttributeName = conceptReference / wildCard
expressionConstraintValue = simpleExpressionConstraint / "(" ws (refinedExpressionConstraint / 	compoundExpressionConstraint) ws ")"
expressionComparisonOperator = "=" / "!=" 
numericComparisonOperator = "=" / "!=" / "<=" / "<" / ">=" / ">"
stringComparisonOperator = "=" / "!=" 
nonNegativeIntegerValue = (digitNonZero *digit ) / zero
mws = 1*( SP / HTAB / CR / LF / comment )  ; mandatory white space
comment = "/*" *(nonStarChar / starWithNonFSlash) "*/"
nonStarChar = SP / HTAB / CR / LF / %x21-29 / %x2B-7E /UTF8-2 / UTF8-3 / UTF8-4
starWithNonFSlash = %x2A nonFSlash
nonFSlash = SP / HTAB / CR / LF / %x21-2E / %x30-7E /UTF8-2 / UTF8-3 / UTF8-4